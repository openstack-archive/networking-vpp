# Keepalived.conf file on the backup network node

vrrp_script chk_script {
  script   "/opt/stack/networking-vpp/networking_vpp/tools/chk_vpp_script.sh"
  interval 10   # check every 10 seconds
  fall 2        # require 2 failures for Down
  rise 2        # require 2 successes for Pass
  weight 100    # Increase priority by 100 (max: 254) when healthcheck passes
}

vrrp_instance R2 {         # VRRP instance for the backup network node
  state BACKUP             # State of VRRP on this node i.e. MASTER or BACKUP
  interface enp2s0f0       # Network interface for the VRRP Instance
  virtual_router_id 2      # VRRP Router ID - Must be the same on all nodes
  priority 150             # Highest pritority becomes the master
  advert_int 1             # VRRP Advertisement interval in seconds

  unicast_src_ip 10.1.1.2 # Bind keepalived to this unnicast IP address
  unicast_peer {
    10.1.1.1  # Send unicast to VRRP peer instead of multicast
  }

  # Optional VIP Setting
  # virtual_ipaddress {
  #  192.168.1.1 dev enp2s0f0
  # }
  # The below script is executed regularly per the settings in the vrrp_script.
  # Return value: 0 for "everything is fine", 1 for "something went wrong".
  # Keepalived uses the return value to take action
  # i.e. Drop or Raise VRRP Priority to trigger an election
  track_script {
    chk_script
  }

  # Shell script to be executed during transition to master state
  # notify_master: <script_name> <hostname>
  # In the example below, R2 is the hostname of the backup network node
  notify_master "/opt/stack/networking-vpp/networking_vpp/tools/master.sh R2"

  # Shell script to be executed during transition to backup state
  # notify_backup: <script_name> <hostname>
  notify_backup "/opt/stack/networking-vpp/networking_vpp/tools/backup.sh R2"
}
