[metadata]
name = networking-vpp
summary = OpenStack Networking for VPP
description-file =
    README.rst
author = OpenStack
author-email = openstack-discuss@lists.openstack.org
home-page = http://www.openstack.org/
classifier =
    Environment :: OpenStack
    Intended Audience :: Information Technology
    Intended Audience :: System Administrators
    License :: OSI Approved :: Apache Software License
    Operating System :: POSIX :: Linux
    Programming Language :: Python
    Programming Language :: Python :: 2
    Programming Language :: Python :: 2.7

[files]
packages =
    networking_vpp
data_files =
    etc/neutron =
        etc/neutron/plugins/ml2/ml2_conf_vpp.ini

[global]
setup-hooks =
    pbr.hooks.setup_hook

[entry_points]
# [ml2]
# mechanism_drivers = vpp
console_scripts =
    vpp-agent = networking_vpp.agent.server:main
    vpp-dump-acls = networking_vpp.tools.dump_acl_info:main
    vpp-dump-tags = networking_vpp.tools.dump_tag_info:main
    vpp-check-etcd = networking_vpp.tools.test_etcd_content:main
    vpp-check-vpp = networking_vpp.tools.test_vpp_content:main
    vpp-watch-etcd = networking_vpp.tools.watch_changes:main
    vpp-etcd-role-conf = networking_vpp.tools.etcd_role_conf:main
neutron.ml2.mechanism_drivers =
    vpp = networking_vpp.mech_vpp:VPPMechanismDriver
neutron.db.alembic_migrations =
    networking-vpp = networking_vpp.db.migration:alembic_migrations
neutron.service_plugins =
    vpp-router = networking_vpp.services.l3_router.l3_vpp:VppL3RouterPlugin
    vpp-trunk = networking_vpp.services.trunk.trunk_vpp:VppTrunkPlugin
oslo.config.opts =
    networking_vpp = networking_vpp.config_opts:list_opts
networking_vpp.vpp_agent.extensions =
    taas_agent = networking_vpp.agent.taas_vpp_agent:TaasVPPAgentExtension
networking_vpp.driver.extensions =
    taas_driver = networking_vpp.taas_vpp:TaasVPPDriverExtension
neutron.ml2.type_drivers =
    gpe = networking_vpp.types.type_gpe:GpeTypeDriver

[build_sphinx]
all_files = 1
build-dir = doc/build
source-dir = doc/source

[extract_messages]
keywords = _ gettext ngettext l_ lazy_gettext
mapping_file = babel.cfg
output_file = networking_vpp/locale/networking-vpp.pot

[compile_catalog]
directory = networking_vpp/locale
domain = networking-vpp

[update_catalog]
domain = networking-vpp
output_dir = networking_vpp/locale
input_file = networking_vpp/locale/networking-vpp.pot

[wheel]
universal = 1
